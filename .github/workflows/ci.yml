name: CI

on:
  push:
    branches:
      - main

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"

      - run: |
          poetry install --with dev
          # avoid activate evn in every step
          echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH

      - id: test
        run: pytest --doctest-modules

      - id: check_version
        run: python .github/workflows/check_version.py

      - id: build
        if: steps.check_version.outputs.new_version != ''
        run: poetry build

      - id: pump
        if: steps.build.conclusion == 'success'
        run: |
          git config --global user.email "hoishing@gmail.com"
          git config --global user.name "Kelvin Ng"
          git tag ${{ steps.check_version.outputs.new_version }}
          git push --tag -f

      - id: release
        if: steps.pump.conclusion == 'success'
        run: |
          latest_tag=${{ steps.check_version.outputs.new_version }}
          echo ${{ secrets.GH_TOKEN }} | gh auth login --with-token
          gh release create "$latest_tag" --generate-notes ./dist/*

      - id: publish
        if: steps.release.conclusion == 'success'
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry publish

      - id: deploy_docs
        if: steps.publish.conclusion == 'success'
        run: mkdocs gh-deploy --force
